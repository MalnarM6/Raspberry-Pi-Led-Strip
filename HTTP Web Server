#!/usr/bin/env python3

import RPi.GPIO as GPIO
import os
import pigpio
pi = pigpio.pi()
from http.server import BaseHTTPRequestHandler, HTTPServer

host_name = '192.168.1.19'  # IP Address of Raspberry Pi
host_port = 8000

def setupGPIO():
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

def getTemperature():
    temp = os.popen("vcgencmd measure_temp").read()
    return temp


class MyServer(BaseHTTPRequestHandler):

    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def _redirect(self, path):
        self.send_response(303)
        self.send_header('Content-type', 'text/html')
        self.send_header('Location', path)
        self.end_headers()

    def do_GET(self):
        html = '''
           <html>
           <body 
            style="width:960px; margin: 20px auto;">
           <h1>Raspberry Pi Web Server</h1>
           <p>CPU temperature is {}</p>
           <form action="/" method="POST">
               RGB Strip :
		<br>
               <input type="submit" name="submit" value="Blue">
               <input type="submit" name="submit" value="BlueOff">
		<br>
               <input type="submit" name="submit" value="Red">
               <input type="submit" name="submit" value="RedOff">
		<br>
               <input type="submit" name="submit" value="Green">
               <input type="submit" name="submit" value="GreenOff">
           </form>
           </body>
           </html>
        '''
        temp = getTemperature()
        self.do_HEAD()
        self.wfile.write(html.format(temp[5:]).encode("utf-8"))

    def do_POST(self):

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode("utf-8")
        post_data = post_data.split("=")[1]

        setupGPIO()

        if post_data == 'Blue':
            pi.set_PWM_dutycycle(24, 255)
        elif post_data == 'BlueOff':
            pi.set_PWM_dutycycle(24, 0)
        elif post_data == 'Red':
            pi.set_PWM_dutycycle(17, 255)
        elif post_data == 'RedOff':
            pi.set_PWM_dutycycle(17, 0)
        elif post_data == 'Green':
            pi.set_PWM_dutycycle(22, 255) 
        elif post_data == 'GreenOff':
            pi.set_PWM_dutycycle(22, 0)
        self._redirect('/')  # Redirect back to the root url


# # # # # Main # # # # #

if __name__ == '__main__':
    http_server = HTTPServer((host_name, host_port), MyServer)
    print("Server Starts - %s:%s" % (host_name, host_port))

    try:
        http_server.serve_forever()
    except KeyboardInterrupt:
        http_server.server_close()
